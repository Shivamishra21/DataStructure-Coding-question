//Minimum no of jump to react at end of array.
// minJumps take two arguments:
// 1. array
// 2. size of array
// return minimum no of jump
// This code has O(n) complexity
// arr[i] represents the max number of steps that can be made forward from that element


int minJumps(int a[], int n){
       //if array has just 1 or 0 element then we don't need any jump
        if(n<=1)
            return 0;
       // if we can't move single step from a[0] then we can't reach at end
        if (a[0] == 0)
            return -1;
        // max steps
        int maxStep = a[0];
        // steps we can move 
        int step = a[0];
        int jump = 1;
        for(int i=1;i<n;i++){
            if(i== n-1)
                return jump;
            maxStep = max(maxStep,i+a[i]);
            step--;
            if(step == 0){
                jump++;
                if(i>=maxStep)
                    return -1;
                step = maxStep-i;
            }
        }
        return -1;
    }
